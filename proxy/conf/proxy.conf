#
#  picturedetector - nginx reverse-proxy
#

user                  picturedetector;
worker_processes      2;
error_log             /www/picturedetector/proxy/log/proxy-httpd_error_log;
pid                   /www/picturedetector/proxy/run/szn-picturedetector-proxy.pid;
worker_rlimit_nofile  1024;

events {
    use epoll;
    worker_connections  128;
}


http {
    # Hash settings
    variables_hash_max_size 1024;
    variables_hash_bucket_size 128;
    server_names_hash_max_size 1024;
    server_names_hash_bucket_size 128;

    # Mime types
    include /www/nginx-extras/doc/mime.types.default;

    # Logging mask
    default_type application/octet-stream;
    log_format   main '$remote_addr - $remote_user [$time_local]  $status '
        '"$request" $body_bytes_sent "$http_referer" '
        '"$http_user_agent" "$http_x_forwarded_for" ';

    proxy_set_header        X-Real-IP       $remote_addr;
    proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header        Host            $host;

    client_max_body_size    16m;
    client_body_buffer_size 2m;

    proxy_buffers           32 32k;
    proxy_buffer_size       32k;
    proxy_busy_buffers_size 64k;

    uwsgi_buffers           32 32k;
    uwsgi_buffer_size       32k;
    uwsgi_busy_buffers_size 64k;

    # allow bigger cookies aka fat-dumbass-cookie
    client_header_buffer_size 32k;
    large_client_header_buffers 4 64k;

    # Ignore headers
    proxy_ignore_headers    Cache-Control;
    proxy_ignore_headers    Expires;

    uwsgi_ignore_headers    Cache-Control;
    uwsgi_ignore_headers    Expires;

    sendfile     on;
    keepalive_timeout  5;
    keepalive_requests 30;
    tcp_nodelay   on;

    # gzip settings
    gzip on;
    gzip_types text/plain text/css application/xml application/x-javascript text/xml;
    gzip_disable "MSIE [1-6]\.";

    # Logging settings
    error_log    /www/picturedetector/proxy/log/proxy-httpd_error_log;
    access_log   /www/picturedetector/proxy/log/proxy-httpd_access_log main;


    # Reverse-proxy
    server {
        listen       [::]:9301 ipv6only=on;
        listen       9301;
        server_name  *.picturedetector.*;

        proxy_intercept_errors on;
        uwsgi_intercept_errors on;

        error_page   403 404                /@homepage;
        error_page   500 501 502 503 504    /@err/500.html;


        # Error pages
        location ~ ^/@err/ {
            internal;
            rewrite ^/@err/(.*) /$1 break;
            root    /www/picturedetector/web/templ/;
            expires 1d;
        }

        location ~ ^/@homepage {
            internal;
            rewrite (.*) http://picturedetector.dev redirect;
        }


        # Location s lomitkem presmerujeme bez lomitka
        location ~ ^/(.*)/$ {
            rewrite ^/(.*)/$ http://$host/$1 redirect;
        }


        # Serve static files
        location ~ ^/(css/|img/|js/|[^\.]\.html$|favicon.ico$) {
            root    /www/picturedetector/web/static/;
            expires 1d;
        }


        # Serve pictures
        location ~ ^/pictures/(?<type>original|resize-[0-9]+)/(?<path>.*).jpg {
            add_header Content-Type image/jpeg;

            set $width  65536;
            set $height 65536;
            if ( $type ~ "resize-(?<size>[0-9]+)" ) {
                set $width  $size;
                set $height $size;
            }

            root    /www/picturedetector/backend/data/pictures/;
            rewrite ^.*$ /$path break;
            image_filter resize $width $height;
        }


        # Requests for dynamic content
        location ~ / {
            include               uwsgi_params.conf;
            uwsgi_pass            unix:///tmp/uwsgi-picturedetector-web.sock;
        }

    }
}

